generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Role {
  USER
  ADMIN
  MANAGER
}

enum TeamRole {
  TEAM_LEAD
  TEAM_MEMBER
}

enum AccessLevel {
  READ_ONLY
  READ_WRITE
  FULL_ACCESS
}

enum Type {
  INTERNAL
  EXTERNAL
}

enum Phase {
  INITIATING
  PLANNING
  EXECUTING
  MONITORING_CONTROLLING
}

enum Status {
  PROPOSED
  IN_PROGRESS
  COMPLETED
  APPROVED
  CANCELED
}

enum HealthColours {
  GREEN
  YELLOW
  RED
}

enum EventType {
  MEETING
  APPOINTMENT
  PROJECT_START
  PROJECT_END
  PROJECT_COMPLETION
  TASK_START
  TASK_END
  TASK_COMPLETION
}

model Organization {
  organizationID  Int      @id @default(autoincrement())
  name            String
  description     String?
  createdAt       DateTime @default(now())
  units           Unit[]
}

model Unit {
  unitID          Int         @id @default(autoincrement())
  name            String
  description     String?
  manager         String      // Name of the manager (could be changed to reference a User)
  organizationID  Int
  organization    Organization @relation(fields: [organizationID], references: [organizationID])
  users           User[]
}

model User {
  userID         Int              @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String           @unique
  phone          String
  address        String
  unitID         Int?             
  activationDate DateTime         @default(now())
  active         Boolean          @default(false)
  primaryRole    Role             @default(USER)
  type           Type             @default(INTERNAL)
  password       String           // <-- Added for authentication
  unit           Unit?            @relation(fields: [unitID], references: [unitID])
  tasks          Task[]
  timeTracking   TimeTracking[]
  teamMemberships TeamMembership[]
}

model TeamMembership {
  membershipID   Int         @id @default(autoincrement())
  userID         Int
  teamID         Int
  teamRole       TeamRole    @default(TEAM_MEMBER)
  accessLevel    AccessLevel @default(READ_ONLY)
  joinedAt       DateTime    @default(now())
  user           User        @relation(fields: [userID], references: [userID])
  team           Team        @relation(fields: [teamID], references: [teamID])

  @@unique([userID, teamID])
}

model Team {
  teamID         Int              @id @default(autoincrement())
  name           String
  createdOn      DateTime         @default(now())
  project        Project?         @relation("TeamProject")
  members        TeamMembership[]
}

model Project {
  projectID    Int            @id @default(autoincrement())
  title        String
  status       Status
  phase        Phase
  teamID       Int            @unique
  budget       Budget?
  health       HealthStatus?
  team         Team           @relation("TeamProject", fields: [teamID], references: [teamID])
  dates        ProjectDates?
  tasks        Task[]
  timeTracking TimeTracking[]
}

model Budget {
  budgetID     Int     @id @default(autoincrement())
  projectID    Int     @unique
  totalBudget  Float
  actualCost   Float
  forecastCost Float
  project      Project @relation(fields: [projectID], references: [projectID])
}

model HealthStatus {
  healthID  Int           @id @default(autoincrement())
  projectID Int           @unique
  scope     HealthColours @default(GREEN)
  schedule  HealthColours @default(GREEN)
  cost      HealthColours @default(GREEN)
  resource  HealthColours @default(GREEN)
  overall   HealthColours @default(GREEN)
  project   Project       @relation(fields: [projectID], references: [projectID])
}

model ProjectDates {
  dateID           Int       @id @default(autoincrement())
  targetDate       DateTime
  startDate        DateTime
  actualCompletion DateTime?
  projectID        Int       @unique
  project          Project   @relation(fields: [projectID], references: [projectID])
}

model Task {
  taskID             Int            @id @default(autoincrement())
  projectID          Int
  title              String
  percentageComplete Float
  priority           String
  userID             Int
  details            String
  status             Status
  startDate          DateTime       @default(now())
  targetDate         DateTime
  actualCompletion   DateTime?
  comments           Comment[]
  user               User           @relation(fields: [userID], references: [userID])
  project            Project        @relation(fields: [projectID], references: [projectID])
}

model TimeTracking {
  timeTrackingID Int      @id @default(autoincrement())
  userID         Int
  projectID      Int
  role           String
  dateWorked     DateTime
  dateRecorded   DateTime @default(now())
  hoursSpent     Float
  project        Project  @relation(fields: [projectID], references: [projectID])
  user           User     @relation(fields: [userID], references: [userID])

  @@unique([userID, projectID, dateWorked])
}

model Comment {
  id          Int          @id @default(autoincrement())
  content     String
  createdAt   DateTime     @default(now())
  taskId      Int
  attachments Attachment[]
  task        Task         @relation(fields: [taskId], references: [taskID])
}

model Attachment {
  id        Int     @id @default(autoincrement())
  fileUrl   String
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])
}

model CalendarEvent {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  type        EventType
  date        DateTime
  color       String?  // Optional: for custom color coding
}

